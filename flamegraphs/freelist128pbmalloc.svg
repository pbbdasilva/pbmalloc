<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="422.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="405" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="405" > </text>
<g id="frames">
<g >
<title>mas_destroy (1,527,913 samples, 0.32%)</title><rect x="1077.7" y="101" width="3.8" height="15.0" fill="rgb(250,209,49)" rx="2" ry="2" />
<text  x="1080.65" y="111.5" ></text>
</g>
<g >
<title>do_syscall_64 (20,618,734 samples, 4.36%)</title><rect x="1040.5" y="245" width="51.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1043.54" y="255.5" >do_sy..</text>
</g>
<g >
<title>handle_pte_fault (18,043,900 samples, 3.82%)</title><rect x="1110.5" y="181" width="45.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1113.55" y="191.5" >hand..</text>
</g>
<g >
<title>perf_event_mmap (2,465,205 samples, 0.52%)</title><rect x="1054.1" y="149" width="6.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1057.12" y="159.5" ></text>
</g>
<g >
<title>tlb_batch_pages_flush (3,437,938 samples, 0.73%)</title><rect x="1168.6" y="181" width="8.6" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="1171.60" y="191.5" ></text>
</g>
<g >
<title>mas_update_gap.part.0 (1,526,787 samples, 0.32%)</title><rect x="1081.5" y="53" width="3.8" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1084.47" y="63.5" ></text>
</g>
<g >
<title>kmem_cache_alloc_bulk (2,461,690 samples, 0.52%)</title><rect x="1063.1" y="101" width="6.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1066.07" y="111.5" ></text>
</g>
<g >
<title>change_protection_range (339,440 samples, 0.07%)</title><rect x="10.0" y="133" width="0.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="13.00" y="143.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (6,939,058 samples, 1.47%)</title><rect x="1168.6" y="309" width="17.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1171.60" y="319.5" ></text>
</g>
<g >
<title>change_pte_range (339,440 samples, 0.07%)</title><rect x="10.0" y="101" width="0.8" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="13.00" y="111.5" ></text>
</g>
<g >
<title>test_pbmalloc (105,144,664 samples, 22.24%)</title><rect x="906.2" y="309" width="262.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="909.18" y="319.5" >test_pbmalloc</text>
</g>
<g >
<title>BIN_ALIGN (810,374 samples, 0.17%)</title><rect x="992.2" y="277" width="2.0" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="995.21" y="287.5" ></text>
</g>
<g >
<title>change_pmd_range.isra.0 (339,440 samples, 0.07%)</title><rect x="10.0" y="117" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="13.00" y="127.5" ></text>
</g>
<g >
<title>___slab_alloc (763,580 samples, 0.16%)</title><rect x="1067.3" y="69" width="1.9" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1070.30" y="79.5" ></text>
</g>
<g >
<title>__alloc_pages (7,564,291 samples, 1.60%)</title><rect x="1134.7" y="117" width="18.9" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1137.71" y="127.5" ></text>
</g>
<g >
<title>uncharge_folio (881,079 samples, 0.19%)</title><rect x="1168.6" y="117" width="2.2" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1171.60" y="127.5" ></text>
</g>
<g >
<title>free_pcp_prepare (869,148 samples, 0.18%)</title><rect x="1170.8" y="117" width="2.2" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="1173.80" y="127.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (3,437,938 samples, 0.73%)</title><rect x="1168.6" y="165" width="8.6" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1171.60" y="175.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (339,440 samples, 0.07%)</title><rect x="10.0" y="245" width="0.8" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>mas_empty_area_rev (2,209,050 samples, 0.47%)</title><rect x="1046.4" y="117" width="5.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1049.41" y="127.5" ></text>
</g>
<g >
<title>__free_one_page (1,687,711 samples, 0.36%)</title><rect x="1173.0" y="85" width="4.2" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1175.97" y="95.5" ></text>
</g>
<g >
<title>all (472,798,020 samples, 100%)</title><rect x="10.0" y="373" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (339,440 samples, 0.07%)</title><rect x="10.0" y="325" width="0.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>do_exit (6,939,058 samples, 1.47%)</title><rect x="1168.6" y="277" width="17.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1171.60" y="287.5" ></text>
</g>
<g >
<title>__folio_alloc (7,564,291 samples, 1.60%)</title><rect x="1134.7" y="133" width="18.9" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1137.71" y="143.5" ></text>
</g>
<g >
<title>perf_iterate_ctx (793,016 samples, 0.17%)</title><rect x="1058.3" y="101" width="2.0" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="1061.30" y="111.5" ></text>
</g>
<g >
<title>do_group_exit (6,939,058 samples, 1.47%)</title><rect x="1168.6" y="293" width="17.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1171.60" y="303.5" ></text>
</g>
<g >
<title>pbmalloc (65,633,126 samples, 13.88%)</title><rect x="1004.8" y="293" width="163.8" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1007.79" y="303.5" >pbmalloc</text>
</g>
<g >
<title>PAGE_INDEX (1,603,022 samples, 0.34%)</title><rect x="1017.6" y="277" width="4.0" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1020.57" y="287.5" ></text>
</g>
<g >
<title>release_pages (3,437,938 samples, 0.73%)</title><rect x="1168.6" y="149" width="8.6" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1171.60" y="159.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (2,057,805 samples, 0.44%)</title><rect x="1112.9" y="133" width="5.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1115.89" y="143.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (7,600,476 samples, 1.61%)</title><rect x="1021.6" y="261" width="18.9" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1024.57" y="271.5" ></text>
</g>
<g >
<title>__rcu_read_lock (940,284 samples, 0.20%)</title><rect x="1110.5" y="133" width="2.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1113.55" y="143.5" ></text>
</g>
<g >
<title>get_page_from_freelist (7,564,291 samples, 1.60%)</title><rect x="1134.7" y="101" width="18.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1137.71" y="111.5" ></text>
</g>
<g >
<title>__mem_cgroup_uncharge_list (881,079 samples, 0.19%)</title><rect x="1168.6" y="133" width="2.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1171.60" y="143.5" ></text>
</g>
<g >
<title>find_vma (812,099 samples, 0.17%)</title><rect x="1157.7" y="197" width="2.0" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1160.66" y="207.5" ></text>
</g>
<g >
<title>irqentry_enter (836,261 samples, 0.18%)</title><rect x="1159.7" y="245" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1162.68" y="255.5" ></text>
</g>
<g >
<title>clear_page_erms (1,784,554 samples, 0.38%)</title><rect x="1139.1" y="85" width="4.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1142.13" y="95.5" ></text>
</g>
<g >
<title>__random (293,954,891 samples, 62.17%)</title><rect x="25.5" y="309" width="733.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="28.47" y="319.5" >__random</text>
</g>
<g >
<title>folio_batch_move_lru (1,624,494 samples, 0.34%)</title><rect x="1124.5" y="101" width="4.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1127.54" y="111.5" ></text>
</g>
<g >
<title>__random_r (47,132,016 samples, 9.97%)</title><rect x="759.1" y="309" width="117.6" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="762.11" y="319.5" >__random_r</text>
</g>
<g >
<title>main (463,883,065 samples, 98.11%)</title><rect x="10.8" y="325" width="1157.8" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="13.85" y="335.5" >main</text>
</g>
<g >
<title>free_unref_page_list (2,556,859 samples, 0.54%)</title><rect x="1170.8" y="133" width="6.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1173.80" y="143.5" ></text>
</g>
<g >
<title>vm_unmapped_area (3,020,328 samples, 0.64%)</title><rect x="1044.4" y="133" width="7.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1047.38" y="143.5" ></text>
</g>
<g >
<title>mas_preallocate (4,838,773 samples, 1.02%)</title><rect x="1063.1" y="133" width="12.0" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1066.07" y="143.5" ></text>
</g>
<g >
<title>vma_alloc_folio (8,371,644 samples, 1.77%)</title><rect x="1132.7" y="149" width="20.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1135.69" y="159.5" ></text>
</g>
<g >
<title>mas_leaf_max_gap (795,964 samples, 0.17%)</title><rect x="1083.3" y="37" width="2.0" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1086.29" y="47.5" ></text>
</g>
<g >
<title>charge_memcg (1,727,692 samples, 0.37%)</title><rect x="1118.0" y="133" width="4.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1121.03" y="143.5" ></text>
</g>
<g >
<title>arch_get_unmapped_area_topdown (3,020,328 samples, 0.64%)</title><rect x="1044.4" y="149" width="7.5" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1047.38" y="159.5" ></text>
</g>
<g >
<title>vma_mas_store (4,061,091 samples, 0.86%)</title><rect x="1075.1" y="133" width="10.2" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1078.14" y="143.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (21,369,624 samples, 4.52%)</title><rect x="1108.4" y="261" width="53.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1111.44" y="271.5" >asm_e..</text>
</g>
<g >
<title>pmd_page_vaddr (798,894 samples, 0.17%)</title><rect x="1153.6" y="165" width="2.0" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1156.59" y="175.5" ></text>
</g>
<g >
<title>page_remove_rmap (878,823 samples, 0.19%)</title><rect x="1181.5" y="117" width="2.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1184.55" y="127.5" ></text>
</g>
<g >
<title>search_binary_handler (339,440 samples, 0.07%)</title><rect x="10.0" y="213" width="0.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>zap_pte_range (1,750,938 samples, 0.37%)</title><rect x="1181.5" y="133" width="4.4" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1184.55" y="143.5" ></text>
</g>
<g >
<title>mmput (6,939,058 samples, 1.47%)</title><rect x="1168.6" y="245" width="17.3" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1171.60" y="255.5" ></text>
</g>
<g >
<title>alloc_memory (29,649,336 samples, 6.27%)</title><rect x="1092.0" y="277" width="74.0" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1095.00" y="287.5" >alloc_me..</text>
</g>
<g >
<title>mas_wr_modify (1,526,787 samples, 0.32%)</title><rect x="1081.5" y="85" width="3.8" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1084.47" y="95.5" ></text>
</g>
<g >
<title>unmap_page_range (3,501,120 samples, 0.74%)</title><rect x="1177.2" y="165" width="8.7" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1180.18" y="175.5" ></text>
</g>
<g >
<title>[unknown] (339,440 samples, 0.07%)</title><rect x="10.0" y="341" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>unmap_vmas (3,501,120 samples, 0.74%)</title><rect x="1177.2" y="197" width="8.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1180.18" y="207.5" ></text>
</g>
<g >
<title>put_cpu_partial (784,415 samples, 0.17%)</title><rect x="1077.7" y="53" width="1.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1080.65" y="63.5" ></text>
</g>
<g >
<title>append_free_list (3,365,025 samples, 0.71%)</title><rect x="996.4" y="277" width="8.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="999.39" y="287.5" ></text>
</g>
<g >
<title>mas_next_nentry (882,268 samples, 0.19%)</title><rect x="1051.9" y="133" width="2.2" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1054.92" y="143.5" ></text>
</g>
<g >
<title>mas_next (882,268 samples, 0.19%)</title><rect x="1051.9" y="149" width="2.2" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1054.92" y="159.5" ></text>
</g>
<g >
<title>count_memcg_events.constprop.0 (832,961 samples, 0.18%)</title><rect x="1155.6" y="197" width="2.1" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1158.58" y="207.5" ></text>
</g>
<g >
<title>lru_add_fn (1,624,494 samples, 0.34%)</title><rect x="1124.5" y="85" width="4.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1127.54" y="95.5" ></text>
</g>
<g >
<title>load_elf_binary (339,440 samples, 0.07%)</title><rect x="10.0" y="197" width="0.8" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>PAGE_INDEX (863,943 samples, 0.18%)</title><rect x="994.2" y="277" width="2.2" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="997.24" y="287.5" ></text>
</g>
<g >
<title>rand (11,794,233 samples, 2.49%)</title><rect x="876.7" y="309" width="29.5" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="879.74" y="319.5" >rand</text>
</g>
<g >
<title>setup_arg_pages (339,440 samples, 0.07%)</title><rect x="10.0" y="181" width="0.8" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>unlock_page_memcg (872,115 samples, 0.18%)</title><rect x="1183.7" y="117" width="2.2" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1186.74" y="127.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (1,687,711 samples, 0.36%)</title><rect x="1173.0" y="101" width="4.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1175.97" y="111.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (1,693,786 samples, 0.36%)</title><rect x="1161.8" y="261" width="4.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1164.77" y="271.5" ></text>
</g>
<g >
<title>[benchmark] (5,857,261 samples, 1.24%)</title><rect x="10.8" y="309" width="14.7" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="13.85" y="319.5" ></text>
</g>
<g >
<title>get_unmapped_area (3,020,328 samples, 0.64%)</title><rect x="1044.4" y="165" width="7.5" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="1047.38" y="175.5" ></text>
</g>
<g >
<title>__x64_sys_execve (339,440 samples, 0.07%)</title><rect x="10.0" y="293" width="0.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (19,834,015 samples, 4.20%)</title><rect x="1042.5" y="197" width="49.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1045.50" y="207.5" >vm_m..</text>
</g>
<g >
<title>down_write_killable (1,304,633 samples, 0.28%)</title><rect x="1085.3" y="181" width="3.2" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1088.28" y="191.5" ></text>
</g>
<g >
<title>do_mmap (17,140,418 samples, 3.63%)</title><rect x="1042.5" y="181" width="42.8" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1045.50" y="191.5" >do_m..</text>
</g>
<g >
<title>tlb_finish_mmu (3,437,938 samples, 0.73%)</title><rect x="1168.6" y="197" width="8.6" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1171.60" y="207.5" ></text>
</g>
<g >
<title>free_unref_page_commit (1,687,711 samples, 0.36%)</title><rect x="1173.0" y="117" width="4.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1175.97" y="127.5" ></text>
</g>
<g >
<title>folio_add_lru_vma (1,624,494 samples, 0.34%)</title><rect x="1124.5" y="133" width="4.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1127.54" y="143.5" ></text>
</g>
<g >
<title>perf_iterate_sb (793,016 samples, 0.17%)</title><rect x="1058.3" y="117" width="2.0" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1061.30" y="127.5" ></text>
</g>
<g >
<title>zap_pmd_range.isra.0 (3,501,120 samples, 0.74%)</title><rect x="1177.2" y="149" width="8.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1180.18" y="159.5" ></text>
</g>
<g >
<title>mas_alloc_nodes (4,838,773 samples, 1.02%)</title><rect x="1063.1" y="117" width="12.0" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1066.07" y="127.5" ></text>
</g>
<g >
<title>do_anonymous_page (17,245,006 samples, 3.65%)</title><rect x="1110.5" y="165" width="43.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1113.55" y="175.5" >do_a..</text>
</g>
<g >
<title>mmap_region (13,365,757 samples, 2.83%)</title><rect x="1051.9" y="165" width="33.4" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="1054.92" y="175.5" >mm..</text>
</g>
<g >
<title>folio_add_lru (1,624,494 samples, 0.34%)</title><rect x="1124.5" y="117" width="4.1" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1127.54" y="127.5" ></text>
</g>
<g >
<title>try_charge_memcg (880,814 samples, 0.19%)</title><rect x="1122.3" y="133" width="2.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1125.34" y="143.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (20,618,734 samples, 4.36%)</title><rect x="1040.5" y="229" width="51.5" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1043.54" y="239.5" >__x64..</text>
</g>
<g >
<title>handle_mm_fault (19,721,264 samples, 4.17%)</title><rect x="1108.4" y="213" width="49.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1111.44" y="223.5" >hand..</text>
</g>
<g >
<title>ksys_mmap_pgoff (20,618,734 samples, 4.36%)</title><rect x="1040.5" y="213" width="51.5" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1043.54" y="223.5" >ksys_..</text>
</g>
<g >
<title>__mem_cgroup_charge (5,606,595 samples, 1.19%)</title><rect x="1110.5" y="149" width="14.0" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1113.55" y="159.5" ></text>
</g>
<g >
<title>__kmem_cache_alloc_bulk (763,580 samples, 0.16%)</title><rect x="1067.3" y="85" width="1.9" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="1070.30" y="95.5" ></text>
</g>
<g >
<title>mas_wr_store_entry.isra.0 (1,526,787 samples, 0.32%)</title><rect x="1081.5" y="101" width="3.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1084.47" y="111.5" ></text>
</g>
<g >
<title>page_add_new_anon_rmap (1,642,273 samples, 0.35%)</title><rect x="1128.6" y="149" width="4.1" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1131.59" y="159.5" ></text>
</g>
<g >
<title>mtree_range_walk (812,099 samples, 0.17%)</title><rect x="1157.7" y="165" width="2.0" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1160.66" y="175.5" ></text>
</g>
<g >
<title>rmqueue (4,006,660 samples, 0.85%)</title><rect x="1143.6" y="85" width="10.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1146.59" y="95.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (6,939,058 samples, 1.47%)</title><rect x="1168.6" y="341" width="17.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1171.60" y="351.5" ></text>
</g>
<g >
<title>mas_store_prealloc (4,061,091 samples, 0.86%)</title><rect x="1075.1" y="117" width="10.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1078.14" y="127.5" ></text>
</g>
<g >
<title>mas_rev_awalk (1,478,215 samples, 0.31%)</title><rect x="1048.2" y="101" width="3.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1051.23" y="111.5" ></text>
</g>
<g >
<title>__handle_mm_fault (18,888,303 samples, 4.00%)</title><rect x="1108.4" y="197" width="47.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1111.44" y="207.5" >__ha..</text>
</g>
<g >
<title>mas_wr_slot_store (1,526,787 samples, 0.32%)</title><rect x="1081.5" y="69" width="3.8" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1084.47" y="79.5" ></text>
</g>
<g >
<title>bprm_execve (339,440 samples, 0.07%)</title><rect x="10.0" y="261" width="0.8" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>do_syscall_64 (6,939,058 samples, 1.47%)</title><rect x="1168.6" y="325" width="17.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1171.60" y="335.5" ></text>
</g>
<g >
<title>unmap_single_vma (3,501,120 samples, 0.74%)</title><rect x="1177.2" y="181" width="8.7" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1180.18" y="191.5" ></text>
</g>
<g >
<title>pbfree (11,719,424 samples, 2.48%)</title><rect x="975.5" y="293" width="29.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="978.54" y="303.5" >pb..</text>
</g>
<g >
<title>do_user_addr_fault (20,533,363 samples, 4.34%)</title><rect x="1108.4" y="229" width="51.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1111.44" y="239.5" >do_us..</text>
</g>
<g >
<title>__libc_start_call_main (463,883,065 samples, 98.11%)</title><rect x="10.8" y="341" width="1157.8" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="13.85" y="351.5" >__libc_start_call_main</text>
</g>
<g >
<title>mt_find (812,099 samples, 0.17%)</title><rect x="1157.7" y="181" width="2.0" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1160.66" y="191.5" ></text>
</g>
<g >
<title>security_mmap_file (1,388,964 samples, 0.29%)</title><rect x="1088.5" y="181" width="3.5" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="1091.53" y="191.5" ></text>
</g>
<g >
<title>__mod_lruvec_state (817,052 samples, 0.17%)</title><rect x="1126.6" y="69" width="2.0" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1129.55" y="79.5" ></text>
</g>
<g >
<title>arch_get_unmapped_area_topdown (754,333 samples, 0.16%)</title><rect x="1042.5" y="165" width="1.9" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1045.50" y="175.5" ></text>
</g>
<g >
<title>vma_expand (10,018,284 samples, 2.12%)</title><rect x="1060.3" y="149" width="25.0" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1063.27" y="159.5" >v..</text>
</g>
<g >
<title>_compound_head (1,750,182 samples, 0.37%)</title><rect x="1177.2" y="133" width="4.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1180.18" y="143.5" ></text>
</g>
<g >
<title>memset_erms (883,602 samples, 0.19%)</title><rect x="1072.9" y="101" width="2.2" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1075.94" y="111.5" ></text>
</g>
<g >
<title>split_block (1,041,069 samples, 0.22%)</title><rect x="1166.0" y="277" width="2.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1169.00" y="287.5" ></text>
</g>
<g >
<title>__mod_node_page_state (878,823 samples, 0.19%)</title><rect x="1181.5" y="85" width="2.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1184.55" y="95.5" ></text>
</g>
<g >
<title>lock_mm_and_find_vma (812,099 samples, 0.17%)</title><rect x="1157.7" y="213" width="2.0" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1160.66" y="223.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1,891,899 samples, 0.40%)</title><rect x="970.8" y="293" width="4.7" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="973.82" y="303.5" ></text>
</g>
<g >
<title>exit_mm (6,939,058 samples, 1.47%)</title><rect x="1168.6" y="261" width="17.3" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1171.60" y="271.5" ></text>
</g>
<g >
<title>__mmput (6,939,058 samples, 1.47%)</title><rect x="1168.6" y="229" width="17.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1171.60" y="239.5" ></text>
</g>
<g >
<title>benchmark (472,774,967 samples, 100.00%)</title><rect x="10.0" y="357" width="1179.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >benchmark</text>
</g>
<g >
<title>exc_page_fault (20,533,363 samples, 4.34%)</title><rect x="1108.4" y="245" width="51.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1111.44" y="255.5" >exc_p..</text>
</g>
<g >
<title>__slab_free (784,415 samples, 0.17%)</title><rect x="1077.7" y="69" width="1.9" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1080.65" y="79.5" ></text>
</g>
<g >
<title>strcmp (1,613,404 samples, 0.34%)</title><rect x="1185.9" y="341" width="4.0" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="1188.92" y="351.5" ></text>
</g>
<g >
<title>__mod_lruvec_page_state (878,823 samples, 0.19%)</title><rect x="1181.5" y="101" width="2.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1184.55" y="111.5" ></text>
</g>
<g >
<title>exec_binprm (339,440 samples, 0.07%)</title><rect x="10.0" y="229" width="0.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>lru_cache_add_inactive_or_unevictable (1,624,494 samples, 0.34%)</title><rect x="1124.5" y="149" width="4.1" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="1127.54" y="159.5" ></text>
</g>
<g >
<title>kmem_cache_free_bulk (743,498 samples, 0.16%)</title><rect x="1079.6" y="85" width="1.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1082.61" y="95.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (339,440 samples, 0.07%)</title><rect x="10.0" y="277" width="0.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>kmem_cache_free_bulk.part.0 (743,498 samples, 0.16%)</title><rect x="1079.6" y="69" width="1.9" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="1082.61" y="79.5" ></text>
</g>
<g >
<title>__mmap (28,219,210 samples, 5.97%)</title><rect x="1021.6" y="277" width="70.4" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1024.57" y="287.5" >__mmap</text>
</g>
<g >
<title>exit_mmap (6,939,058 samples, 1.47%)</title><rect x="1168.6" y="213" width="17.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1171.60" y="223.5" ></text>
</g>
<g >
<title>mprotect_fixup (339,440 samples, 0.07%)</title><rect x="10.0" y="165" width="0.8" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>BIN_ALIGN (1,719,783 samples, 0.36%)</title><rect x="1013.3" y="277" width="4.3" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1016.28" y="287.5" ></text>
</g>
<g >
<title>try_charge_memcg (883,082 samples, 0.19%)</title><rect x="1120.1" y="117" width="2.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="1123.14" y="127.5" ></text>
</g>
<g >
<title>perf_event_mmap_event (1,603,677 samples, 0.34%)</title><rect x="1056.3" y="133" width="4.0" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1059.27" y="143.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (20,618,734 samples, 4.36%)</title><rect x="1040.5" y="261" width="51.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1043.54" y="271.5" >entry..</text>
</g>
<g >
<title>BIN_ALIGN (783,855 samples, 0.17%)</title><rect x="1019.6" y="261" width="2.0" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1022.62" y="271.5" ></text>
</g>
<g >
<title>memset (1,493,481 samples, 0.32%)</title><rect x="1069.2" y="101" width="3.7" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1072.21" y="111.5" ></text>
</g>
<g >
<title>do_syscall_64 (339,440 samples, 0.07%)</title><rect x="10.0" y="309" width="0.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>rmqueue_bulk (4,006,660 samples, 0.85%)</title><rect x="1143.6" y="69" width="10.0" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1146.59" y="79.5" ></text>
</g>
<g >
<title>kmem_cache_free (784,415 samples, 0.17%)</title><rect x="1077.7" y="85" width="1.9" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="1080.65" y="95.5" ></text>
</g>
<g >
<title>__page_set_anon_rmap (1,642,273 samples, 0.35%)</title><rect x="1128.6" y="133" width="4.1" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="1131.59" y="143.5" ></text>
</g>
<g >
<title>__mod_node_page_state (817,052 samples, 0.17%)</title><rect x="1126.6" y="53" width="2.0" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1129.55" y="63.5" ></text>
</g>
<g >
<title>down_write (1,118,420 samples, 0.24%)</title><rect x="1060.3" y="133" width="2.8" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="1063.27" y="143.5" ></text>
</g>
<g >
<title>change_protection (339,440 samples, 0.07%)</title><rect x="10.0" y="149" width="0.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
</g>
</svg>
